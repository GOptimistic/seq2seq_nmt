# config.yaml


## Where the samples will be written
save_data: run

# Training files
data:
    corpus_1:
        path_src: flat_src.txt.subword.train
        path_tgt: flat_tgt.txt.subword.train
        transforms: [filtertoolong]
    valid:
        path_src: flat_src.txt.subword.dev
        path_tgt: flat_tgt.txt.subword.dev
        transforms: [filtertoolong]

# Vocabulary files, generated by onmt_build_vocab
src_vocab: run/source.vocab
tgt_vocab: run/target.vocab

# Vocabulary size - should be the same as in sentence piece
src_vocab_size: 50000
tgt_vocab_size: 50000

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 1000
tgt_seq_length: 100

# Tokenization options
src_subword_model: source.model
tgt_subword_model: target.model

# Where to save the log file and the output models/checkpoints
log_file: train.log
save_model: models/model.fren

# Training options
train_steps: 20000
valid_steps: 1000
# Stop training if it does not imporve after n validations
early_stopping: 5
save_checkpoint_steps: 1000
warmup_steps: 2000
report_every: 100

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]
seed: 666

# Batching
num_workers: 0  # Default: 2, set to 0 when RAM out of memory
batch_type: "sents"
batch_size: 64   # Tokens per batch, change when CUDA out of memory
valid_batch_size: 64
max_generator_batches: 2
accum_count: [4]
accum_steps: [0]

# Optimization
optim: "adam"
learning_rate: 0.0001
decay_method: "noam"
adam_beta2: 0.998
max_grad_norm: 2
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "sents"

# Model
encoder_type: brnn # Use a bidirectional RNN for the encoder
decoder_type: rnn # Use an RNN for the decoder
enc_layers: 1
dec_layers: 1
rnn_size: 512 # Size of the RNN hidden state
rnn_type: GRU # Type of the RNN. Could be GRU or LSTM
word_vec_size: 256 # Word embedding size
attention_type: general # Type of the attention mechanism