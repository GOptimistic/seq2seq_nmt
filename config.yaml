# config.yaml

seed: 666
## Where the samples will be written
save_data: run
overwrite: true
# Training files
data:
    train:
        path_src: flat_src.txt.subword.train
        path_tgt: flat_tgt.txt.subword.train
        transforms: [filtertoolong]
    valid:
        path_src: flat_src.txt.subword.dev
        path_tgt: flat_tgt.txt.subword.dev
        transforms: [filtertoolong]

# Vocabulary files, generated by onmt_build_vocab
src_vocab: run/source.vocab
tgt_vocab: run/target.vocab
share_vocab: true

# Vocabulary size - should be the same as in sentence piece
src_vocab_size: 50000
tgt_vocab_size: 50000

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 1000
tgt_seq_length: 100

# Tokenization options
src_subword_model: source.model
tgt_subword_model: target.model

# Where to save the log file and the output models/checkpoints
log_file: train.log
log_file_level: 20
verbose: true
save_model: models/model.fren

# Training options
train_steps: 20000
valid_steps: 1000
# Stop training if it does not imporve after n validations
#early_stopping: 3
save_checkpoint_steps: 1000




# Batching
bucket_size: 1024
batch_size: 64   # Tokens per batch, change when CUDA out of memory
valid_batch_size: 64
num_workers: 0
#accum_count: [4]
#accum_steps: [0]

# Optimization
optim: "adam"
learning_rate: 0.001


## Attention
#copy_attn: true
#reuse_copy_attn: true


# Model
encoder_type: brnn # Use a bidirectional RNN for the encoder
decoder_type: rnn # Use an RNN for the decoder
enc_layers: 2
dec_layers: 2
rnn_size: 256 # Size of the RNN hidden state
rnn_type: GRU # Type of the RNN. Could be GRU or LSTM
word_vec_size: 256 # Word embedding size
global_attention: general

tensorboard: true
tensorboard_log_dir: tensorboard